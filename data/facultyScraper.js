const axios = require('axios');
const cheerio = require('cheerio');
const HttpStatus = require('http-status-codes');

/**
 * Determines whether the given error was generated by Axios.
 *
 * We can't use 'instanceof' with Axios errors because it doesn't
 * Define its own Error classes. Rather, it sets an 'isAxiosErorr'
 * property on the errors it throws.
 *
 * Axios will throw an error for all 4xx and 5xx HTTP statuses.
 */
function isAxiosError(error) {
  return error && error.isAxiosError;
}

let ROOT = 'https://www.davidson.edu';

const DEPARTMENTS_PATH = '/academic-departments';

const loadData = (baseUrl, path) => {
  let url = baseUrl + path;

  console.log(`Fetching data from: ${url}`);

  return axios.get(url).then(result => cheerio.load(result.data));
}

const getDepartmentPaths = async () => {
  console.log('Function getDepartmentPaths has started');
  const $ = await loadData(ROOT, DEPARTMENTS_PATH);

  return Array.from($('a', '.three-column').map((i, listItem) => {
    return {name: listItem.children[0].data, path: listItem.attribs.href};
  }));
}

function getDeptFacultyInfoFromListItem(baseUrl, listItem) {
  const $ = cheerio;
  let facultyNode  = $(listItem);

  let contactInfo = Array.from(facultyNode.find('.person-teaser__contact a').map((i, element) => {
    return element.children;
  }));

  // Return object for each faculty member
  return {
    name: facultyNode.find('.person-teaser__name').text().trim(),
    titles: facultyNode.find('.person-teaser__titles').text().trim(),
    expertiseAreas: Array.from(facultyNode.find('.person-teaser__list li').map((i, element) => {
      return element.children[0].data;
    })),
    email: (contactInfo[1] ? contactInfo[0].data : null),
    phone: (contactInfo[1] ? contactInfo[1].data : contactInfo[0].data),
    office: facultyNode.find('div .person-teaser__contact').find('div').text().trim(),
    imageUrl: baseUrl  + facultyNode.find('img').attr('src'),
  };
}

const getDeptFaculty = async (baseUrl, deptPath) => {
  try {
    const $ = await loadData(baseUrl, deptPath + '/faculty-staff');

    return $('.person-teaser').map(function() {
      return getDeptFacultyInfoFromListItem(baseUrl, this);
    }).get();
  } catch (err) {
    if (!isAxiosError(err)) { throw err; }

    switch(err.response.status) {
      case HttpStatus.NOT_FOUND:
        return null;
      default:
        throw err;
    }
  }
}

let run = async () => {
  let departments = await getDepartmentPaths();
  console.log(departments);

  return Promise.all(departments.map(async(dept) => {
    dept.faculty = await getDeptFaculty(ROOT, dept.path);
    return dept;
  }));
}

run()
  .then(departments => {
    console.log(departments);
  })
  .catch(err => {
    console.log(err.stack);
  });
